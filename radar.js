!function(t){function n(o){if(e[o])return e[o].exports;var r=e[o]={exports:{},id:o,loaded:!1};return t[o].call(r.exports,r,r.exports,n),r.loaded=!0,r.exports}var e={};return n.m=t,n.c=e,n.p="",n(0)}([function(t,n,e){!function(){var t="./detectors/",n={init:function(){console.log(this.version)},version:e(4)(t+"version.js"),getRootElement:e(2)(t+"getRootElement.js"),getViewportSize:e(3)(t+"getViewportSize.js")};window.radar=n}()},function(t,n){t.exports=function(){var t=document.documentElement;return"CSS1Compat"===document.compatMode?t:document.body||t}},function(t,n,e){function o(t){return e(r(t))}function r(t){return i[t]||function(){throw new Error("Cannot find module '"+t+"'.")}()}var i={"./detectors/getRootElement.js":1};o.keys=function(){return Object.keys(i)},o.resolve=r,t.exports=o,o.id=2},function(t,n,e){function o(t){return e(r(t))}function r(t){return i[t]||function(){throw new Error("Cannot find module '"+t+"'.")}()}var i={"./detectors/getViewportSize.js":5};o.keys=function(){return Object.keys(i)},o.resolve=r,t.exports=o,o.id=3},function(t,n,e){function o(t){return e(r(t))}function r(t){return i[t]||function(){throw new Error("Cannot find module '"+t+"'.")}()}var i={"./detectors/version.js":6};o.keys=function(){return Object.keys(i)},o.resolve=r,t.exports=o,o.id=4},function(t,n,e){t.exports=function(){var t=e(1)();return[t.clientWidth,t.clientHeight]}},function(t,n){t.exports="0.0.1"}]);
//# sourceMappingURL=data:application/json;base64,